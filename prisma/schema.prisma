generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model Account {
  id                String    @id @unique(map: "account_id_unique")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userid_foreign")

  @@unique([provider, providerAccountId], map: "account_provider_provideraccountid_unique")
}

model Session {
  id           String   @id @unique(map: "session_id_unique")
  sessionToken String   @unique(map: "session_sessiontoken_unique")
  userId       String
  expiresAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userid_foreign")
}

model User {
  id            String    @id @unique(map: "user_id_unique")
  name          String
  email         String    @unique(map: "user_email_unique")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "verificationtoken_token_unique")
  expiresAt  DateTime

  @@id([identifier, token])
}
