generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model User {
  id              String            @id @unique(map: "user_id_unique")
  name            String
  email           String            @unique(map: "user_email_unique")
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  NextAuthAccount NextAuthAccount[]
  NextAuthSession NextAuthSession[]
}

model NextAuthAccount {
  id                String  @id @unique(map: "nextauthaccount_id_unique")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "nextauthaccount_userid_foreign")

  @@unique([provider, providerAccountId], map: "nextauthaccount_provider_provideraccountid_unique")
}

model NextAuthSession {
  id           String   @id @unique(map: "nextauthsession_id_unique")
  sessionToken String   @unique(map: "nextauthsession_sessiontoken_unique")
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "nextauthsession_userid_foreign")
}

model NextAuthVerificationToken {
  identifier String
  token      String   @unique(map: "nextauthverificationtoken_token_unique")
  expires    DateTime

  @@id([identifier, token])
}
